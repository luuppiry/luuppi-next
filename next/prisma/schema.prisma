// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                Int                 @id @default(autoincrement())
  /// User's EntraID UUID
  entraUserUuid     String              @unique
  email             String              @unique
  username          String?
  firstName         String?
  lastName          String?
  domicle           String?
  preferredFullName String?
  major             Major               @default(OTHER)
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  registrations     EventRegistration[]
  roles             RolesOnUsers[]
  answers           Answer[]
}

model Role {
  id             Int                 @id @default(autoincrement())
  /// UUID from Strapi role
  strapiRoleUuid String              @unique
  createdAt      DateTime            @default(now())
  updatedAt      DateTime            @updatedAt
  users          RolesOnUsers[]
  registrations  EventRegistration[]
}

// This is an "explicit" many-to-many relation table
// https://www.prisma.io/docs/orm/prisma-schema/data-model/relations/many-to-many-relations#explicit-many-to-many-relations
model RolesOnUsers {
  /// UUID from Strapi role
  strapiRoleUuid String
  role           Role      @relation(fields: [strapiRoleUuid], references: [strapiRoleUuid], onDelete: Cascade)
  /// User's EntraID UUID
  entraUserUuid  String
  user           User      @relation(fields: [entraUserUuid], references: [entraUserUuid], onDelete: Cascade)
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  /// Some roles might have expiration time. For example, if the user
  /// is Luuppi member, but only one year membership, this field
  /// should be set to the expiration time of the role.
  expiresAt      DateTime?

  @@id([strapiRoleUuid, entraUserUuid])
}

model EventRegistration {
  id               Int       @id @default(autoincrement())
  /// UUID from Strapi role
  strapiRoleUuid   String
  purchaseRole     Role      @relation(fields: [strapiRoleUuid], references: [strapiRoleUuid])
  /// Final state of payment
  paymentCompleted Boolean   @default(false)
  price            Float     @default(0)
  /// Database generated expiration time for the registration. Default is 60 minutes
  reservedUntil    DateTime  @default(dbgenerated("now() + interval '60 minutes'"))
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  /// Soft delete. If this is set, the registration is not valid anymore
  deletedAt        DateTime?
  /// User's EntraID UUID
  entraUserUuid    String
  user             User      @relation(fields: [entraUserUuid], references: [entraUserUuid], onDelete: Cascade)
  /// Strapi Event ID
  eventId          Int
  event            Event     @relation(fields: [eventId], references: [eventId])
  payments         Payment[]
  answers          Answer[]

  @@index([eventId])
}

model Answer {
  id             Int               @id @default(autoincrement())
  type           QuestionType
  question       String
  answer         String
  /// User's EntraID UUID
  entraUserUuid  String
  user           User              @relation(fields: [entraUserUuid], references: [entraUserUuid], onDelete: Cascade)
  registrationId Int
  registration   EventRegistration @relation(fields: [registrationId], references: [id], onDelete: Cascade)
}

model Payment {
  id           Int                 @id @default(autoincrement())
  orderId      String              @unique
  status       PaymentStatus       @default(PENDING)
  amount       Float
  language     Language            @default(FI)
  createdAt    DateTime            @default(now())
  updatedAt    DateTime            @updatedAt
  registration EventRegistration[]
}

// User to store some event metadata "locally" so
// we don't have to fetch it from Strapi every time.
model Event {
  id            Int                 @id @default(autoincrement())
  /// Strapi Event ID
  eventId       Int                 @unique
  nameEn        String
  nameFi        String
  startDate     DateTime
  endDate       DateTime
  locationEn    String
  locationFi    String
  createdAt     DateTime            @default(now())
  updatedAt     DateTime            @updatedAt
  registrations EventRegistration[]
}

enum PaymentStatus {
  PENDING /// Charge is created, but no status received yet
  COMPLETED /// Payment is confirmed to be completed
  CANCELLED /// Payment was failed or cancelled
}

enum QuestionType {
  TEXT
  SELECT
  CHECKBOX
}

enum Language {
  EN
  FI
}

enum Major {
  COMPUTER_SCIENCE
  MATHEMATICS
  STATISTICAL_DATA_ANALYSIS
  OTHER
}
